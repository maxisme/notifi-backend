name: notifi
on: [ push ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: latest
          working-directory: src

  build:
    name: Build & Deploy Image
    runs-on: ubuntu-latest
    needs:
      - lint
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          tag="$ECR_REGISTRY/notifi:${{ github.sha }}"
          if [[ "${{ github.ref }}" != "refs/heads/master" ]]
          then
            tag="$ECR_REGISTRY/notifi:latest"
          fi
          docker build --build-arg=COMMIT_HASH=${GITHUB_SHA::7} -t $tag .
          docker push $tag

  terraform:
    name: Run Terraform
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform Format
        working-directory: ./infra
        run: terraform fmt -check
      - name: Terraform Init
        working-directory: ./infra
        run: terraform init
      - name: Terraform Apply
        if: github.ref == 'refs/heads/lambda'
        working-directory: ./infra
        env:
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        run: terraform apply -auto-approve
